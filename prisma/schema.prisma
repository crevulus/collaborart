generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model devices {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime  @db.Timestamptz(6)
  exports    exports[]
  grids      grids[]
  artists    artists[]
}

model exports {
  id         BigInt   @id @default(autoincrement())
  grid_id    BigInt
  created_at DateTime @db.Timestamptz(6)
  device_id  String   @db.Uuid
  export_url String?
  devices    devices  @relation(fields: [device_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  grids      grids    @relation(fields: [grid_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model grids {
  id          BigInt    @id @default(autoincrement())
  is_complete Boolean?
  device_id   String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  owner_id    BigInt?
  exports     exports[]
  devices     devices   @relation(fields: [device_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  artists     artists[]
  squares     squares[]
  owner       artists?  @relation("GridOwner", fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model artists {
  id          BigInt   @id @default(autoincrement())
  grid_id     BigInt
  username    String
  pin         Int
  device_id   String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  devices     devices  @relation(fields: [device_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  grids       grids    @relation(fields: [grid_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  owned_grids grids[]  @relation("GridOwner")
}

model squares {
  id           BigInt   @id @default(autoincrement())
  grid_id      BigInt
  position     Int
  drawing_data String
  image_url    String?
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  grids        grids    @relation(fields: [grid_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
